/*https://atcoder.jp/contests/abc278/tasks/abc278_e*/
/*2025年02月04日 00時39分09秒*/
// #include <atcoder/all>
// using namespace atcoder;
// using mint = modint998244353;
// using mint = modint1000000007;
#include <bits/stdc++.h>
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define rep(i, n) for (long long int i = 0; i < (n); ++i)
#define rep2(i, k, n) for (long long int i = (k); i < (n); ++i)
using namespace std;
using ll = long long;
using vint = vector<int>;
using vll = vector<ll>;
using vvint = vector<vector<int>>;
using vvll = vector<vector<ll>>;

// const ll INF = (ll)2e18+9;
const int INF = (int)2e9 + 7;

template <typename T>
void chmin(T& a, T b) {
    a = min(a, b);
}
template <typename T>
void chmax(T& a, T b) {
    a = max(a, b);
}

template <typename T>
void print(vector<T> v) {
    int n = v.size();
    rep(i, n) {
        if (i == 0)
            cout << v[i];
        else
            cout << ' ' << v[i];
    }
    cout << endl;
}

void yesno(bool x) {
    puts(x ? "Yes" : "No");
}

void solve();

int main() {
    solve();
    return 0;
}

void solve() {
    ll H, W, N, h, w;
    cin >> H >> W >> N >> h >> w;
    vvll A(H + 2, vll(W + 2, 0));
    rep(i, H) rep(j, W) cin >> A[i + 1][j + 1];

    vector<set<int>> urow_set(H + 2), drow_set, lcol_set(W + 2), rcol_set;
    rep(i, H + 2) {
        rep(j, W + 2) {
            urow_set[i].insert(A[i][j]);
            lcol_set[j].insert(A[i][j]);
        }
    }
    drow_set = urow_set;
    rcol_set = lcol_set;

    reverse(all(drow_set));
    reverse(all(rcol_set));

    rep(i, H + 2) {
        for (int x : urow_set[i]) {
            urow_set[i + 1].insert(x);
        }
        for (int x : drow_set[i]) {
            drow_set[i + 1].insert(x);
        }
    }

    rep(i, W + 2) {
        for (int x : lcol_set[i])
            lcol_set[i + 1].insert(x);
        for (int x : rcol_set[i])
            rcol_set[i + 1].insert(x);
    }

    for (int i = 1; i <= H; i++) {
        for (int j = 1; j <= W; j++) {
            set<int> l, r, u, d;
            l = lcol_set[j - 1];
            r = rcol_set[W - (j + w)];
            u = urow_set[i - 1];
            d = drow_set[H - (i + h)];

            set<int> ans = l;
            for (int x : r)
                ans.insert(x);
            for (int x : u)
                ans.insert(x);
            for (int x : d)
                ans.insert(x);
            if (j != 1)
                cout << ' ';
            cout << ans.size();
        }
        cout << endl;
    }
}
